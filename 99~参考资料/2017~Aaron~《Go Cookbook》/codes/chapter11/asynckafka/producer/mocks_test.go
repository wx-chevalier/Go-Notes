// Automatically generated by MockGen. DO NOT EDIT!
// Source: gopkg.in/Shopify/sarama.v1 (interfaces: AsyncProducer)

package main

import (
	gomock "github.com/golang/mock/gomock"
	sarama_v1 "gopkg.in/Shopify/sarama.v1"
)

// Mock of AsyncProducer interface
type MockAsyncProducer struct {
	ctrl     *gomock.Controller
	recorder *_MockAsyncProducerRecorder
}

// Recorder for MockAsyncProducer (not exported)
type _MockAsyncProducerRecorder struct {
	mock *MockAsyncProducer
}

func NewMockAsyncProducer(ctrl *gomock.Controller) *MockAsyncProducer {
	mock := &MockAsyncProducer{ctrl: ctrl}
	mock.recorder = &_MockAsyncProducerRecorder{mock}
	return mock
}

func (_m *MockAsyncProducer) EXPECT() *_MockAsyncProducerRecorder {
	return _m.recorder
}

func (_m *MockAsyncProducer) AsyncClose() {
	_m.ctrl.Call(_m, "AsyncClose")
}

func (_mr *_MockAsyncProducerRecorder) AsyncClose() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AsyncClose")
}

func (_m *MockAsyncProducer) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAsyncProducerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockAsyncProducer) Errors() <-chan *sarama_v1.ProducerError {
	ret := _m.ctrl.Call(_m, "Errors")
	ret0, _ := ret[0].(<-chan *sarama_v1.ProducerError)
	return ret0
}

func (_mr *_MockAsyncProducerRecorder) Errors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Errors")
}

func (_m *MockAsyncProducer) Input() chan<- *sarama_v1.ProducerMessage {
	ret := _m.ctrl.Call(_m, "Input")
	ret0, _ := ret[0].(chan<- *sarama_v1.ProducerMessage)
	return ret0
}

func (_mr *_MockAsyncProducerRecorder) Input() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Input")
}

func (_m *MockAsyncProducer) Successes() <-chan *sarama_v1.ProducerMessage {
	ret := _m.ctrl.Call(_m, "Successes")
	ret0, _ := ret[0].(<-chan *sarama_v1.ProducerMessage)
	return ret0
}

func (_mr *_MockAsyncProducerRecorder) Successes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Successes")
}
